import { boolean, number, string, table } from "@rocicorp/zero";

export const accounting_report = table("accounting_report").columns({accounting_report_type_id: number().optional(),
    created_at: string(),
    customer_id: number(),
    id: number(),
    mime_type: string(),
    month: string(),
    name: string(),
    pathname: string(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const accounting_report_type = table("accounting_report_type").columns({created_at: string(),
    description: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const assistant = table("assistant").columns({assistant_id: string(),
    created_at: string(),
    customer_id: number(),
    id: number(),
    thread_id: string(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const bank_statement_transaction = table("bank_statement_transaction").columns({account: number().optional(),
    balance_after_transaction__amount: string().optional(),
    balance_after_transaction__currency: string().optional(),
    bank_transaction_code__code: string().optional(),
    bank_transaction_code__description: string().optional(),
    bank_transaction_code__sub_code: string().optional(),
    booking_date: string().optional(),
    created_at: string(),
    credit_debit_indicator: string(),
    creditor__contact_details__email_address: string().optional(),
    creditor__contact_details__phone_number: string().optional(),
    creditor__name: string().optional(),
    creditor__organisation_id__identification: string().optional(),
    creditor__organisation_id__issuer: string().optional(),
    creditor__organisation_id__scheme_name_id: number().optional(),
    creditor__postal_address__address_line: string().optional(),
    creditor__postal_address__address_type: string().optional(),
    creditor__postal_address__building_number: string().optional(),
    creditor__postal_address__country: string().optional(),
    creditor__postal_address__country_sub_division: string().optional(),
    creditor__postal_address__department: string().optional(),
    creditor__postal_address__post_code: string().optional(),
    creditor__postal_address__street_name: string().optional(),
    creditor__postal_address__sub_department: string().optional(),
    creditor__postal_address__town_name: string().optional(),
    creditor__private_id__identification: string().optional(),
    creditor__private_id__issuer: string().optional(),
    creditor__private_id__scheme_name_id: number().optional(),
    creditor_account__iban: string().optional(),
    creditor_account__other__identification: string().optional(),
    creditor_account__other__issuer: string().optional(),
    creditor_account__other__scheme_name_id: number().optional(),
    creditor_account_additional_identification: string().optional(),
    creditor_agent__bic_fi: string().optional(),
    creditor_agent__clearing_system_member_id__clearing_system_id: string().optional(),
    creditor_agent__clearing_system_member_id__member_id: string().optional(),
    creditor_agent__name: string().optional(),
    customer_eb_account_id: number(),
    customer_id: number(),
    date: string(),
    debtor__contact_details__email_address: string().optional(),
    debtor__contact_details__phone_number: string().optional(),
    debtor__name: string().optional(),
    debtor__organisation_id__identification: string().optional(),
    debtor__organisation_id__issuer: string().optional(),
    debtor__organisation_id__scheme_name_id: number().optional(),
    debtor__postal_address__address_line: string().optional(),
    debtor__postal_address__address_type: string().optional(),
    debtor__postal_address__building_number: string().optional(),
    debtor__postal_address__country: string().optional(),
    debtor__postal_address__country_sub_division: string().optional(),
    debtor__postal_address__department: string().optional(),
    debtor__postal_address__post_code: string().optional(),
    debtor__postal_address__street_name: string().optional(),
    debtor__postal_address__sub_department: string().optional(),
    debtor__postal_address__town_name: string().optional(),
    debtor__private_id__identification: string().optional(),
    debtor__private_id__issuer: string().optional(),
    debtor__private_id__scheme_name_id: number().optional(),
    debtor_account__iban: string().optional(),
    debtor_account__other__identification: string().optional(),
    debtor_account__other__issuer: string().optional(),
    debtor_account__other__scheme_name_id: number().optional(),
    debtor_account_additional_identification: string().optional(),
    debtor_agent__bic_fi: string().optional(),
    debtor_agent__clearing_system_member_id__clearing_system_id: string().optional(),
    debtor_agent__clearing_system_member_id__member_id: string().optional(),
    debtor_agent__name: string().optional(),
    entry_reference: string().optional(),
    exchange_rate__contract_identification: string().optional(),
    exchange_rate__exchange_rate: string().optional(),
    exchange_rate__instructed_amount__amount: string().optional(),
    exchange_rate__instructed_amount__currency: string().optional(),
    exchange_rate__rate_type_id: number().optional(),
    exchange_rate__unit_currency: string().optional(),
    id: number(),
    merchant_category_code: string().optional(),
    needs_receipt: boolean().optional(),
    note: string().optional(),
    receipt_id: number().optional(),
    reference_number: string().optional(),
    remittance_information: string().optional(),
    status_id: number(),
    transaction_amount__amount: string(),
    transaction_amount__currency: string(),
    transaction_date: string().optional(),
    transaction_id: string().optional(),
    updated_at: string(),
    value_date: string().optional()}).primaryKey("id");
export const bank_statement_transaction__bst_history_item = table("bank_statement_transaction__bst_history_item").columns({bank_statement_transaction_id: number(),
    bst_history_item_id: number().optional(),
    created_at: string(),
    id: number(),
    note_read_at: string().optional(),
    reason: string().optional(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const bank_statement_transaction__rate_type = table("bank_statement_transaction__rate_type").columns({created_at: string(),
    description: string(),
    id: number(),
    updated_at: string(),
    value: string()}).primaryKey("id");
export const bank_statement_transaction__scheme_name = table("bank_statement_transaction__scheme_name").columns({created_at: string(),
    description: string(),
    id: number(),
    updated_at: string(),
    value: string()}).primaryKey("id");
export const bank_statement_transaction__status = table("bank_statement_transaction__status").columns({created_at: string(),
    description: string(),
    id: number(),
    updated_at: string(),
    value: string()}).primaryKey("id");
export const bst_history_item = table("bst_history_item").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const chat = table("chat").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const chat_message = table("chat_message").columns({chat_id: number(),
    content: string(),
    content_link: string().optional(),
    created_at: string(),
    id: number(),
    read_at: string().optional(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const checklist = table("checklist").columns({created_at: string(),
    customer_id: number(),
    end_at: string(),
    id: number(),
    start_at: string(),
    updated_at: string()}).primaryKey("id");
export const checklist__checklist_item = table("checklist__checklist_item").columns({checklist_id: number(),
    checklist_item_id: number(),
    comment: string().optional(),
    created_at: string(),
    id: number(),
    is_done: boolean(),
    updated_at: string()}).primaryKey("id");
export const checklist_item = table("checklist_item").columns({checklist_item_group_id: number(),
    created_at: string(),
    description: string(),
    id: number(),
    is_automatic: boolean(),
    name: string(),
    order: number(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const checklist_item_group = table("checklist_item_group").columns({created_at: string(),
    description: string(),
    id: number(),
    name: string(),
    order: number(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const classification_rule_expense = table("classification_rule_expense").columns({account: number(),
    created_at: string(),
    currency_id: number().optional(),
    id: number(),
    max_value: number().optional(),
    min_value: number().optional(),
    name: string(),
    updated_at: string(),
    valid_from: string().optional(),
    valid_until: string().optional(),
    vat_option_id: number().optional()}).primaryKey("id");
export const classification_rule_expense__classification_rule_industry = table("classification_rule_expense__classification_rule_industry").columns({classification_rule_expense_id: number(),
    classification_rule_industry_id: number(),
    created_at: string(),
    id: number(),
    updated_at: string()}).primaryKey("id");
export const classification_rule_industry = table("classification_rule_industry").columns({created_at: string(),
    fine_tune_model_id: number().optional(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const classification_rule_payment_method = table("classification_rule_payment_method").columns({account: number().optional(),
    business_entity: string(),
    created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const currency = table("currency").columns({code: string(),
    created_at: string(),
    id: number(),
    name: string(),
    symbol: string(),
    updated_at: string()}).primaryKey("id");
export const customer = table("customer").columns({accounting_period_end: string().optional(),
    accounting_period_start: string().optional(),
    address: string().optional(),
    billing_account: number().optional(),
    business_entity: string(),
    business_id: string(),
    city: string().optional(),
    classification_rule_industry_id: number().optional(),
    contact_email: string().optional(),
    contact_fullname: string().optional(),
    contact_phone: string().optional(),
    contract_documents: number().optional(),
    contract_value: number().optional(),
    country: string().optional(),
    created_at: string(),
    einvoice_address_FI: string().optional(),
    einvoice_address_INT: string().optional(),
    fine_tune_model_id: number().optional(),
    first_accounting_period_end: string().optional(),
    first_accounting_period_start: string().optional(),
    has_signed_einvoice_agreement: boolean(),
    home_municipality: string().optional(),
    id: number(),
    image_pathname: string().optional(),
    indemnity_insurance_company: string().optional(),
    industry: string().optional(),
    interest_rate: number().optional(),
    invoice_image_pathname: string().optional(),
    is_archived: boolean(),
    is_customer_verified: boolean(),
    is_purchase_invoice_onboarded: boolean(),
    language: string().optional(),
    maventa_ignore_invoices_before: string().optional(),
    name: string(),
    no_vat: boolean().optional(),
    notice_period: number().optional(),
    organization_id: number(),
    pension_insurance_company: string().optional(),
    postcode: string().optional(),
    procountor_version: string().optional(),
    sales_invoice_billing_account: string().optional(),
    sales_invoice_number_prefix: string().optional(),
    sales_invoice_number_suffix: string().optional(),
    sales_invoice_number_value: number(),
    sales_invoice_payment_terms: number(),
    sales_invoice_reminder_message: string().optional(),
    slug: string(),
    tax_period: string().optional(),
    updated_at: string(),
    vat_0_code_id: number().optional(),
    vat_0_legend: string().optional(),
    vat_number: string().optional()}).primaryKey("id");
export const customer__user = table("customer__user").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const customer__vat_option = table("customer__vat_option").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    updated_at: string(),
    vat_option_id: number()}).primaryKey("id");
export const customer_assigned_user = table("customer_assigned_user").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const customer_eb_account = table("customer_eb_account").columns({account_holder: string().optional(),
    account_identification_hash: string(),
    account_uid: string().optional(),
    bic: string().optional(),
    created_at: string(),
    currency: string().optional(),
    customer_eb_session: number().optional(),
    customer_id: number(),
    financial_institution: string().optional(),
    iban: string().optional(),
    id: number(),
    updated_at: string()}).primaryKey("id");
export const customer_eb_session = table("customer_eb_session").columns({aspsp_country: string().optional(),
    aspsp_name: string().optional(),
    created_at: string(),
    customer_id: number(),
    id: number(),
    marked_as_expired_at: string().optional(),
    psu_type: string().optional(),
    session_id: string(),
    updated_at: string(),
    user_id: number(),
    valid_until: string()}).primaryKey("id");
export const customer_iban = table("customer_iban").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    name: string(),
    updated_at: string(),
    value: string()}).primaryKey("id");
export const customer_invite = table("customer_invite").columns({created_at: string(),
    customer_id: number(),
    email: string(),
    expires_at: string(),
    id: number(),
    token: string(),
    updated_at: string()}).primaryKey("id");
export const customer_ledger_account = table("customer_ledger_account").columns({account_code: number(),
    category_id: string().optional(),
    created_at: string(),
    customer_id: number(),
    description: string().optional(),
    id: string(),
    is_active: boolean(),
    is_custom: boolean(),
    name_en: string(),
    name_fi: string(),
    name_sv: string(),
    normal_balance: string(),
    updated_at: string()}).primaryKey("id");
export const customer_maventa_api_keys = table("customer_maventa_api_keys").columns({client_id: string(),
    client_secret: string(),
    created_at: string(),
    customer_id: number(),
    id: number(),
    iv: string(),
    updated_at: string()}).primaryKey("id");
export const customer_procountor_api_key = table("customer_procountor_api_key").columns({api_key: string(),
    created_at: string(),
    customer_id: number(),
    id: number(),
    iv: string(),
    updated_at: string()}).primaryKey("id");
export const customer_supplier_notification = table("customer_supplier_notification").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    is_authorized: boolean(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const customer_verification = table("customer_verification").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const einvoice_network = table("einvoice_network").columns({created_at: string(),
    description: string().optional(),
    id: number(),
    name: string(),
    updated_at: string()}).primaryKey("id");
export const einvoice_operator = table("einvoice_operator").columns({created_at: string(),
    id: number(),
    identifier: string(),
    name: string(),
    updated_at: string()}).primaryKey("id");
export const fine_tune_attachment = table("fine_tune_attachment").columns({created_at: string(),
    fine_tune_data_id: number(),
    id: number(),
    mime_type: string(),
    pathname: string(),
    procountor_attachment_id: number(),
    updated_at: string()}).primaryKey("id");
export const fine_tune_data = table("fine_tune_data").columns({classification_rule_industry_id: number().optional(),
    created_at: string(),
    customer_id: number(),
    id: number(),
    ocr: string().optional(),
    procountor_ledger_receipt: string().optional(),
    procountor_ledger_receipt_id: string().optional(),
    procountor_ledger_receipt_invoice_id: string().optional(),
    tilit_receipt: string().optional(),
    updated_at: string()}).primaryKey("id");
export const fine_tune_model = table("fine_tune_model").columns({created_at: string(),
    created_by: number(),
    description: string().optional(),
    id: number(),
    is_public: boolean(),
    model_id: string().optional(),
    nickname: string().optional(),
    openai_id: string().optional(),
    system_prompt: string().optional(),
    training_data: string(),
    updated_at: string(),
    user_prompt: string().optional()}).primaryKey("id");
export const fine_tune_model_procountor_training_data = table("fine_tune_model_procountor_training_data").columns({created_at: string(),
    id: number(),
    model_id: number(),
    receipt_id: number(),
    test_data: boolean().optional(),
    updated_at: string()}).primaryKey("id");
export const fine_tune_model_tilit_training_data = table("fine_tune_model_tilit_training_data").columns({created_at: string(),
    id: number(),
    model_id: number(),
    purchase_invoice_id: number().optional(),
    receipt_id: number().optional(),
    test_data: boolean().optional(),
    updated_at: string()}).primaryKey("id");
export const kysely_migration = table("kysely_migration").columns({name: string(),
    timestamp: string()}).primaryKey("name");
export const kysely_migration_lock = table("kysely_migration_lock").columns({id: string(),
    is_locked: number()}).primaryKey("id");
export const ledger_account_category = table("ledger_account_category").columns({created_at: string(),
    description: string().optional(),
    id: string(),
    name: string(),
    updated_at: string()}).primaryKey("id");
export const organization = table("organization").columns({created_at: string(),
    email: string(),
    id: number(),
    is_default: boolean(),
    name: string(),
    updated_at: string()}).primaryKey("id");
export const payment_method_breakdown = table("payment_method_breakdown").columns({account: number().optional(),
    accounting_value: number().optional(),
    created_at: string(),
    id: number(),
    purchase_invoice_id: number().optional(),
    receipt_id: number().optional(),
    sales_invoice_id: number().optional(),
    updated_at: string(),
    vat_option_id: number().optional()}).primaryKey("id");
export const project = table("project").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    name: string(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice = table("purchase_invoice").columns({additional_info: string().optional(),
    created_at: string(),
    currency_id: number().optional(),
    customer_id: number(),
    destination: string().optional(),
    due_date: string().optional(),
    iban: string().optional(),
    id: number(),
    interest_rate: number().optional(),
    invoice_date: string().optional(),
    invoice_number: string().optional(),
    maventa__comment: string().optional(),
    maventa__created_at: string().optional(),
    maventa__origin: string().optional(),
    maventa__origin_type: string().optional(),
    maventa__received_at: string().optional(),
    maventa_id: string().optional(),
    maventa_status: string().optional(),
    procountor_journal_id: string().optional(),
    procountor_journal_invoice_id: string().optional(),
    procountor_version_timestamp: string().optional(),
    purchase_invoice_marked_payment_event: number().optional(),
    purchase_location: string().optional(),
    purchase_location__bid: string().optional(),
    purchase_location__country: string().optional(),
    purchase_location__eia: string().optional(),
    recipient__bid: string().optional(),
    recipient__country: string().optional(),
    recipient__eia: string().optional(),
    recipient__name: string().optional(),
    recipient__operator: string().optional(),
    reference_number: string().optional(),
    revision: string().optional(),
    source_format: string().optional(),
    sum: number().optional(),
    total_accounting_value: number().optional(),
    updated_at: string(),
    virtual_bank_barcode: string().optional()}).primaryKey("id");
export const purchase_invoice__project = table("purchase_invoice__project").columns({created_at: string(),
    id: number(),
    project_id: number(),
    purchase_invoice_id: number(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice__purchase_invoice_accounting_status = table("purchase_invoice__purchase_invoice_accounting_status").columns({created_at: string(),
    id: number(),
    purchase_invoice_accounting_status_id: number(),
    purchase_invoice_id: number(),
    reason: string().optional(),
    updated_at: string(),
    user_id: number().optional()}).primaryKey("id");
export const purchase_invoice__purchase_invoice_status = table("purchase_invoice__purchase_invoice_status").columns({created_at: string(),
    id: number(),
    note_read_at: string().optional(),
    purchase_invoice_id: number(),
    purchase_invoice_status_id: number().optional(),
    reason: string().optional(),
    updated_at: string(),
    user_id: number().optional()}).primaryKey("id");
export const purchase_invoice_accounting_status = table("purchase_invoice_accounting_status").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice_analysis = table("purchase_invoice_analysis").columns({ai_comment: string().optional(),
    created_at: string(),
    id: number(),
    ocr: string().optional(),
    open_ai_response: string().optional(),
    purchase_invoice_id: number(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice_file = table("purchase_invoice_file").columns({created_at: string(),
    id: number(),
    main_file: boolean().optional(),
    mime_type: string(),
    pathname: string(),
    purchase_invoice_id: number(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice_iban = table("purchase_invoice_iban").columns({created_at: string(),
    epi_account: boolean().optional(),
    id: number(),
    purchase_invoice_id: number(),
    updated_at: string(),
    value: string()}).primaryKey("id");
export const purchase_invoice_marked_payment_event = table("purchase_invoice_marked_payment_event").columns({created_at: string(),
    id: number(),
    payment_date: string(),
    payment_method_id: number(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const purchase_invoice_maventa_action = table("purchase_invoice_maventa_action").columns({channel: string().optional(),
    created_at: string(),
    happened_at: string().optional(),
    id: number(),
    key: string().optional(),
    message: string().optional(),
    purchase_invoice_id: number(),
    type: string().optional(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice_payment_method = table("purchase_invoice_payment_method").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice_status = table("purchase_invoice_status").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const purchase_invoice_xml = table("purchase_invoice_xml").columns({created_at: string(),
    finvoice_xml: string().optional(),
    id: number(),
    purchase_invoice_id: number(),
    updated_at: string()}).primaryKey("id");
export const receipt = table("receipt").columns({additional_info: string().optional(),
    card_ending: string().optional(),
    classification_rule_expense_id: number().optional(),
    created_at: string(),
    currency_id: number(),
    customer_id: number(),
    finished_at: string().optional(),
    id: number(),
    invoice_date: string().optional(),
    invoice_number: number().optional(),
    procountor_journal_id: string().optional(),
    procountor_journal_invoice_id: string().optional(),
    procountor_version_timestamp: string().optional(),
    purchase_date: string().optional(),
    purchase_location: string().optional(),
    reference_number: string().optional(),
    total_accounting_value: number().optional(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const receipt__project = table("receipt__project").columns({created_at: string(),
    id: number(),
    project_id: number(),
    receipt_id: number(),
    updated_at: string()}).primaryKey("id");
export const receipt__receipt_status = table("receipt__receipt_status").columns({created_at: string(),
    id: number(),
    note_read_at: string().optional(),
    reason: string().optional(),
    receipt_id: number(),
    receipt_status_id: number(),
    updated_at: string(),
    user_id: number()}).primaryKey("id");
export const receipt_analysis = table("receipt_analysis").columns({ai_comment: string().optional(),
    classification_account: number().optional(),
    created_at: string(),
    fine_tune_model_id: number().optional(),
    id: number(),
    ocr: string().optional(),
    open_ai_response: string().optional(),
    receipt_id: number(),
    updated_at: string()}).primaryKey("id");
export const receipt_iban = table("receipt_iban").columns({created_at: string(),
    id: number(),
    receipt_id: number().optional(),
    updated_at: string(),
    value: string()}).primaryKey("id");
export const receipt_image = table("receipt_image").columns({created_at: string(),
    id: number(),
    mime_type: string(),
    pathname: string(),
    receipt_id: number(),
    updated_at: string()}).primaryKey("id");
export const receipt_status = table("receipt_status").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const reconciliation_join = table("reconciliation_join").columns({bank_statement_transaction_id: number().optional(),
    bank_statement_transaction_id_related: number().optional(),
    created_at: string(),
    id: number(),
    purchase_invoice_id: number().optional(),
    purchase_invoice_id_related: number().optional(),
    receipt_id: number().optional(),
    receipt_id_related: number().optional(),
    sales_invoice_id: number().optional(),
    sales_invoice_id_related: number().optional(),
    source: string().optional(),
    updated_at: string()}).primaryKey("id");
export const role = table("role").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const sales_invoice = table("sales_invoice").columns({additional_info: string().optional(),
    billing_method: string(),
    booking_date: string().optional(),
    comment: string().optional(),
    created_at: string(),
    currency_id: number(),
    customer_id: number(),
    destination_einvoice: string().optional(),
    destination_einvoice_network_id: number().optional(),
    destination_einvoice_operator_id: number().optional(),
    destination_email: string().optional(),
    due_date: string().optional(),
    email_sent_at: string().optional(),
    iban: string().optional(),
    id: number(),
    interest_rate: number().optional(),
    invoice_date: string().optional(),
    invoice_number: string().optional(),
    maventa_id: string().optional(),
    maventa_sent_at: string().optional(),
    pdf_pathname: string().optional(),
    period_end_at: string().optional(),
    period_start_at: string().optional(),
    procountor_journal_id: string().optional(),
    procountor_journal_invoice_id: string().optional(),
    procountor_version_timestamp: string().optional(),
    reference_number: string().optional(),
    reminder_message: string().optional(),
    sales_invoice_customer_id: number().optional(),
    sales_invoice_customer_item_id: number().optional(),
    status: string(),
    type: string(),
    updated_at: string(),
    vat_0_code: string().optional(),
    vat_0_legend: string().optional()}).primaryKey("id");
export const sales_invoice__project = table("sales_invoice__project").columns({created_at: string(),
    id: number(),
    project_id: number(),
    sales_invoice_id: number(),
    updated_at: string()}).primaryKey("id");
export const sales_invoice__sales_invoice_accounting_status = table("sales_invoice__sales_invoice_accounting_status").columns({created_at: string(),
    id: number(),
    reason: string().optional(),
    sales_invoice_accounting_status_id: number(),
    sales_invoice_id: number(),
    updated_at: string(),
    user_id: number().optional()}).primaryKey("id");
export const sales_invoice_accounting_status = table("sales_invoice_accounting_status").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const sales_invoice_attachment = table("sales_invoice_attachment").columns({created_at: string(),
    filename: string(),
    id: number(),
    mime_type: string(),
    pathname: string(),
    sales_invoice_id: number(),
    updated_at: string()}).primaryKey("id");
export const sales_invoice_customer = table("sales_invoice_customer").columns({address: string(),
    business_id: string().optional(),
    city: string(),
    contact_email: string(),
    contact_fullname: string(),
    contact_phone: string(),
    country: string(),
    created_at: string(),
    customer_id: number(),
    default_billing_method: string(),
    id: number(),
    locale: string(),
    name: string(),
    postcode: string(),
    reversed_vat: boolean().optional(),
    type: string(),
    updated_at: string(),
    vat_number: string().optional()}).primaryKey("id");
export const sales_invoice_customer_einvoice_address = table("sales_invoice_customer_einvoice_address").columns({created_at: string(),
    default: boolean(),
    einvoice_network_id: number(),
    einvoice_operator_id: number().optional(),
    id: number(),
    sales_invoice_customer_id: number(),
    updated_at: string(),
    value: string()}).primaryKey("id");
export const sales_invoice_customer_item = table("sales_invoice_customer_item").columns({address: string(),
    business_id: string().optional(),
    city: string(),
    contact_email: string(),
    contact_fullname: string(),
    contact_phone: string(),
    country: string(),
    created_at: string(),
    customer_id: number(),
    default_billing_method: string(),
    id: number(),
    locale: string(),
    name: string(),
    postcode: string(),
    reversed_vat: boolean().optional(),
    type: string(),
    updated_at: string(),
    vat_number: string().optional()}).primaryKey("id");
export const sales_invoice_item = table("sales_invoice_item").columns({created_at: string(),
    id: number(),
    name: string(),
    period_end_at: string().optional(),
    period_start_at: string().optional(),
    price: number(),
    quantity: number(),
    sales_invoice_id: number(),
    sales_invoice_product_id: number().optional(),
    unit: string(),
    updated_at: string(),
    vat_percent: number()}).primaryKey("id");
export const sales_invoice_product = table("sales_invoice_product").columns({created_at: string(),
    customer_id: number(),
    id: number(),
    name: string(),
    price: number(),
    product_code: string().optional(),
    unit: string(),
    updated_at: string(),
    vat_included: boolean().optional(),
    vat_percent: number()}).primaryKey("id");
export const sales_invoice_xml = table("sales_invoice_xml").columns({created_at: string(),
    finvoice_xml: string(),
    id: number(),
    sales_invoice_id: number(),
    updated_at: string()}).primaryKey("id");
export const user = table("user").columns({active_customer_id: number().optional(),
    address: string().optional(),
    city: string().optional(),
    country: string().optional(),
    created_at: string(),
    email: string().optional(),
    firstname: string(),
    has_accepted_privacy: boolean(),
    id: number(),
    image_path: string().optional(),
    is_test_user: boolean(),
    is_tutorial_completed: boolean(),
    lastname: string(),
    locale: string(),
    organization_id: number(),
    phone_number: string().optional(),
    postcode: string().optional(),
    push_notification_token: string().optional(),
    role_id: number(),
    uid: string().optional(),
    updated_at: string()}).primaryKey("id");
export const user_mobile_info = table("user_mobile_info").columns({created_at: string(),
    device_type: string(),
    id: number(),
    updated_at: string(),
    user_id: number(),
    version: string()}).primaryKey("id");
export const vat_breakdown = table("vat_breakdown").columns({account: number().optional(),
    accounting_value: number().optional(),
    created_at: string(),
    id: number(),
    is_reversed: boolean().optional(),
    purchase_invoice_id: number().optional(),
    receipt_id: number().optional(),
    sales_invoice_id: number().optional(),
    updated_at: string(),
    vat_option_id: number().optional(),
    vat_percent: number().optional(),
    vat_status: number().optional(),
    vat_type: string().optional()}).primaryKey("id");
export const vat_code = table("vat_code").columns({created_at: string(),
    id: number(),
    name: string(),
    slug: string(),
    updated_at: string()}).primaryKey("id");
export const vat_option = table("vat_option").columns({created_at: string(),
    id: number(),
    is_reversed: boolean().optional(),
    name: string(),
    updated_at: string(),
    valid_from: string(),
    valid_until: string().optional(),
    vat_percent: number().optional(),
    vat_status: number(),
    vat_type: string()}).primaryKey("id");
export const permissions = table("permissions").columns({hash: string().optional(),
    lock: boolean(),
    permissions: string().optional()}).primaryKey("lock");
export const schemaVersions = table("schemaVersions").columns({lock: boolean(),
    maxSupportedVersion: number().optional(),
    minSupportedVersion: number().optional()}).primaryKey("lock");
export const clients = table("clients").columns({clientGroupID: string(),
    clientID: string(),
    lastMutationID: string(),
    userID: string().optional()}).primaryKey("clientID");
export const shardConfig = table("shardConfig").columns({ddlDetection: boolean(),
    initialSchema: string().optional(),
    lock: boolean(),
    publications: string()}).primaryKey("lock");
export const versionHistory = table("versionHistory").columns({dataVersion: number(),
    lock: string(),
    minSafeVersion: number(),
    schemaVersion: number()}).primaryKey("lock");
